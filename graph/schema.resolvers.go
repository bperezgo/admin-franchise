package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/bperezgo/admin_franchise/graph/model"
	"github.com/bperezgo/admin_franchise/internal/domain/franchise"
	"github.com/google/uuid"
)

// CreateFranchise is the resolver for the createFranchise field.
func (r *mutationResolver) CreateFranchise(ctx context.Context, input model.NewFranchise) (*model.Franchise, error) {
	dto := franchise.CreateDTO{
		ID:  uuid.New().String(),
		URL: input.URL,
	}

	if err := r.franchiseCreatorRequestReceiver.Receive(ctx, dto); err != nil {
		return nil, err
	}

	return &model.Franchise{
		ID:  dto.ID,
		URL: dto.URL,
	}, nil
}

// UpdateFranchise is the resolver for the updateFranchise field.
func (r *mutationResolver) UpdateFranchise(ctx context.Context, id string, input model.UpdateFranchise) (*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: UpdateFranchise - updateFranchise"))
}

// GetFranchise is the resolver for the getFranchise field.
func (r *queryResolver) GetFranchise(ctx context.Context, criteria *model.FranchiseCriteria) (*model.Franchise, error) {
	name := criteria.Name

	fran, err := r.franchiseGetter.GetFranchiseByName(ctx, *name)
	if err != nil {
		return nil, err
	}

	return &model.Franchise{
		ID:    fran.ID,
		URL:   fran.URL,
		Title: fran.Title,
		Company: &model.Company{
			ID:   fran.CompanyID,
			Name: fran.Company.Name,
			Owner: &model.OwnerCompany{
				ID: fran.Company.CompanyOwnerID,
			},
			TaxNumber: fran.Company.TaxNumber,
		},
		Location: &model.Location{
			ID:      fran.LocationID,
			City:    fran.Location.City,
			State:   fran.Location.State,
			Country: fran.Location.Country,
		},
		AddressLocation: &model.AddressLocation{
			ID:      fran.AddressLocationID,
			Address: fran.AddressLocation.Address,
			ZipCode: fran.AddressLocation.ZipCode,
		},
	}, nil
}

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context, criteria *model.CompanyCriteria) (*model.Company, error) {
	name := criteria.Name

	comp, err := r.companyGetter.GetCompanyByName(ctx, *name)
	if err != nil {
		return nil, err
	}

	dto := comp.DTO()

	return &model.Company{
		ID:   dto.ID,
		Name: dto.Name,
		Owner: &model.OwnerCompany{
			ID: dto.CompanyOwnerID,
		},
		TaxNumber: dto.TaxNumber,
		Location: &model.Location{
			ID: dto.LocationID,
		},
		Franchises: []*model.Franchise{},
		AddressLocation: &model.AddressLocation{
			ID: dto.AddressLocationID,
		},
	}, nil
}

// GetFranchises is the resolver for the getFranchises field.
func (r *queryResolver) GetFranchises(ctx context.Context, criteria *model.FranchisesCriteria) ([]*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: GetFranchises - getFranchises"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
