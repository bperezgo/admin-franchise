package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/bperezgo/admin_franchise/graph/model"
)

// CreateFranchise is the resolver for the createFranchise field.
func (r *mutationResolver) CreateFranchise(ctx context.Context, input model.NewFranchise) (*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: CreateFranchise - createFranchise"))
}

// UpdateFranchise is the resolver for the updateFranchise field.
func (r *mutationResolver) UpdateFranchise(ctx context.Context, id string, input model.UpdateFranchise) (*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: UpdateFranchise - updateFranchise"))
}

// GetFranchise is the resolver for the getFranchise field.
func (r *queryResolver) GetFranchise(ctx context.Context, criteria *model.FranchiseCriteria) (*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: GetFranchise - getFranchise"))
}

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context) ([]*model.Company, error) {
	panic(fmt.Errorf("not implemented: GetCompany - getCompany"))
}

// GetFranchises is the resolver for the getFranchises field.
func (r *queryResolver) GetFranchises(ctx context.Context, criteria *model.FranchisesCriteria) ([]*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: GetFranchises - getFranchises"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
